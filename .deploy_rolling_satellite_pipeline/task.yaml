---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: execute-on-satelite
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: kubernetes-service-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud kubernetes service
      default: apikey
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: directory-path
    - name: image-url
      description: URL of an image that is relevant to the deployment action
      default: ""
    - name: shuttle-properties-file
      description: name of the properties file that contain properties to include in the environment for the `cf-commands` snippet/script execution
      default: ""
    - name: setup-script
      description: script that typically set up environment before the _deployment_ script execution.
      default: ""
    - name: script
      description: _deployment_ script to be executed
      default: ""
    - name: post-execution-script
      description: script that get executed after the _deployment_ script has been executed.
      default: ""
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1. Default to 0
      default: "0"
  workspaces:
    - name: artifacts
      description: A workspace
      mountPath: /artifacts
  steps:
    - name: execute
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      workingDir: /artifacts
      env:
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: PIPELINE_STAGE_EXECUTION_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: PIPELINE_TRIGGERING_USER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
        - name: PIPELINE_BLUEMIX_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.kubernetes-service-apikey-secret-key)
        - name: PIPELINE_BLUEMIX_RESOURCE_GROUP
          value: $(params.resource-group)
        - name: PIPELINE_IMAGE_URL
          value: $(params.image-url)
        - name: SHUTTLE_PROPERTIES_FILE
          value: $(params.shuttle-properties-file)
        - name: PIPELINE_DEBUG
          value: $(params.pipeline-debug)
        - name: directory-path
          value: $(params.directory-path)
      script: |
        #!/bin/bash
        set -e -o pipefail
        if [ $PIPELINE_DEBUG == 1 ]; then
            env
            pwd
            ls -l
            echo "=== cat /artifacts/_toolchain.json ==="
            cat /artifacts/_toolchain.json
            echo ""
            echo "======================================"
            trap env EXIT
            set -x
        fi
        # SETUP BEGIN
        ibmcloud config --check-version false
        ibmcloud login -a $(params.ibmcloud-api) --apikey $PIPELINE_BLUEMIX_API_KEY --no-region
        if [ "$PIPELINE_BLUEMIX_RESOURCE_GROUP" ]; then
          ibmcloud target -g "$PIPELINE_BLUEMIX_RESOURCE_GROUP"
        fi
       
        export PIPELINE_TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /artifacts/_toolchain.json)
        if [ "$SHUTTLE_PROPERTIES_FILE" ]; then
          source $SHUTTLE_PROPERTIES_FILE
          export $(cut -d= -f1 $SHUTTLE_PROPERTIES_FILE)
        fi
        $(params.setup-script)
        # DO THE WORK
        $(params.script)
        $(params.post-execution-script)
        # Record task results
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /artifacts/_toolchain.json
          subPath: toolchain.json
          name: cd-config-volume
        - name: environment-properties
          mountPath: /cd-config/environment-properties
        - name: secure-properties
          mountPath: /cd-config/secure-properties
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
    - name: environment-properties
      configMap:
        name: environment-properties
    - name: secure-properties
      secret:
        secretName: secure-properties        
